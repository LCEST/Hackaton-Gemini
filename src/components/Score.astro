---
import type { IRating } from '../types/endpointTypes';

const { score = 0, description } = Astro.props as IRating;

let scoreColor = '';
let textColor = '';
if (score < 5) {
	scoreColor = 'rgb(240 82 82)';
	textColor = 'rgb(119 29 29)';
} else if (score < 7) {
	scoreColor = 'rgb(194 120 3)';
	textColor = 'rgb(99 49 18)';
} else {
	scoreColor = 'rgb(14 159 110)';
	textColor = 'rgb(1 71 55)';
}

const degrees = `${(score * 180) / 10}deg`;
---
<div
	id="radialScore"
	class="flex relative mx-auto my-0 h-[106px] w-[213px] hover:scale-110 scale-100 transition-all duration-200 ease-in"
>
	<div
		class="absolute h-[106px] w-[213px] overflow-hidden before:absolute before:h-[106px] before:w-[213px] before:rounded-t-[213px] before:border-[30px] before:border-b-0 before:border-gray-200 dark:before:border-gray-900"
	>
		<span
			class="absolute top-full h-[106px] w-[213px] origin-top rounded-b-[213px] !border-t-0 score"
		></span>
		<div
			class="absolute bottom-0 left-0 right-0 z-10 flex items-center justify-center"
		>
			<div
				class="inline-flex shrink-0 items-center gap-2 rounded uppercase px-2 py-1 scoreColor"
			>
				<span class="font-bold text-md scoreTextColor">{score}/10</span>
			</div>
		</div>
	</div>
</div>
<p class="mt-4 text-sm text-gray-500 dark:text-gray-400">{description}</p>

<script>
	const observer = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			if (entry.isIntersecting) {
				entry.target.classList.add('show');
			}
		});
	});

	const hidden = document.querySelectorAll('.score');
	hidden.forEach((el) => observer.observe(el));
</script>

<style define:vars={{ degrees, scoreColor, textColor }}>
	.score {
		border: 30px solid var(--scoreColor);
		transition: all 1.5s;
		transform: rotate(0deg);
	}

	.show {
		transform: rotate(var(--degrees));
	}

	.scoreColor {
		background-color: var(--scoreColor);
	}

	.scoreTextColor {
		color: var(--textColor);
	}
</style>
