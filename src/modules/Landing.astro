---
import '@mux/mux-uploader';
import { postUpload } from '../services/mux-service';
import { callGeminiAPI } from '../services/generativeVisionService';

const uploadRes = await postUpload();
const { url, id } = uploadRes.data;

if (Astro.request.method === "POST") {
  const data = await Astro.request.formData();
  const file = data.get('file') as File;
  const fileBuffer = await file.arrayBuffer()
  const b64 = Buffer.from(fileBuffer).toString('base64');
  const geminiRes = await callGeminiAPI(b64, file.type);
  // TODO: Guardar geminiRes en localstorage para luego redirigir al usuario a su resultado.
}
---

<div class="flex justify-center">
  <mux-uploader id="uploader" class="hidden"></mux-uploader>
  <form 
    class="mt-2 space-y-6"
    method="post"
    enctype="multipart/form-data"
  >
    <mux-uploader-drop
      class="flex flex-col gap-4 items-center w-full max-w-xl p-6 bg-white rounded-lg shadow dark:bg-gray-800"
      mux-uploader="uploader"
      id="uploader-drop"
    >
      <span 
        class="text-2xl text-center font-bold text-gray-900 dark:text-white"
      >
        Drop a video file here to upload
      </span>
      <span
        class="text-sm font-normal text-gray-900 dark:text-white"
      >
        or
      </span>
      <mux-uploader-file-select 
        mux-uploader="uploader"
        id="file-select"
      >
        <button
          class="bg-blue-200 hover:bg-blue-400 dark:text-white dark:bg-slate-700 dark:hover:bg-slate-900 hover:scale-105 py-3 px-4 rounded-md transition-all duration-200 ease-in-out"
          type="button"
          id="pick-file-btn"
        >
          Pick a file 
        </button>
      </mux-uploader-file-select>
      <mux-uploader-progress
        type="percentage"
        mux-uploader="uploader"
        class="text-xs font-bold dark:text-white"
      ></mux-uploader-progress>
    </mux-uploader-drop>
  </form>
</div>

<style>
  mux-uploader-progress {
    --progress-bar-fill-color: rgb(118 169 250)
  }
  mux-uploader-drop[active] {
    @apply bg-blue-400 dark:bg-gray-700 transition-all duration-200
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/@mux/mux-uploader@1.0.0-beta.6"></script>

<script define:vars={{ url, id }}>
  const muxUploader = document.querySelector('mux-uploader');
  muxUploader.endpoint = url;

  // TODO: Event listener 'upload-error'. ¿Qué vamos a hacer cuando no se pueda subir el video a MUX?
  // Mostrar pantalla de error y pedirle al usuario que vuelva a intentar.

  muxUploader.addEventListener('file-ready', (e) => {
    const file = e.detail;
    // TODO: Validar que el tipo del archivo sea video. De no ser así, NO ejecutar el fetch.

    const form = document.querySelector('form');
    const formData = new FormData(form);
    formData.append('file', file);
    fetch('/', {
      method: 'POST',
      body: formData,
    });
  });

  muxUploader.addEventListener('progress', (e) => {
    // TODO: Ocultar el form y mostrar un componente de carga mientras pasan dos cosas:
    // a. Se sube el video
    // b. Se analiza con IA
  });

  muxUploader.addEventListener("success", () => {
    //location.href = `/video-results/${id}`;
  });
</script>
