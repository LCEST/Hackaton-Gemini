---
import '@mux/mux-uploader';
import { postUpload } from '../services/mux-service';
import Loader from '../components/Loader.astro';
import { API_URL } from '../app/constants';

const uploadRes = await postUpload();
const { url: uploadUrl, id } = uploadRes.data;
---

<div class=" min-h-screen pt-8 flex flex-col items-center">
  <Loader />
  <form 
    method="post"
    enctype="multipart/form-data"
    id="main-form"
  >
    <mux-uploader id="uploader" class="hidden"></mux-uploader>
    <mux-uploader-drop
      class="flex flex-col gap-4 items-center w-full max-w-xl p-6 bg-white rounded-lg shadow dark:bg-gray-800"
      mux-uploader="uploader"
      id="uploader-drop"
    >
      <span 
        class="text-2xl text-center font-bold text-gray-900 dark:text-white"
      >
        Drop a video file here to upload
      </span>
      <span
        class="text-sm font-normal text-gray-900 dark:text-white"
      >
        or
      </span>
      <mux-uploader-file-select 
        mux-uploader="uploader"
        id="file-select"
      >
        <button
          class="bg-blue-200 hover:bg-blue-400 dark:text-white dark:bg-slate-700 dark:hover:bg-slate-900 hover:scale-105 py-3 px-4 rounded-md transition-all duration-200 ease-in-out"
          type="button"
          id="pick-file-btn"
        >
          Pick a file 
        </button>
      </mux-uploader-file-select>
      <mux-uploader-progress
        type="percentage"
        mux-uploader="uploader"
        class="text-xs font-bold dark:text-white"
      ></mux-uploader-progress>
    </mux-uploader-drop>
  </form>
</div>

<style>
  mux-uploader-drop[active] {
    @apply bg-blue-400 dark:bg-gray-700 transition-all duration-200;
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/@mux/mux-uploader@1.0.0-beta.6">
import { API_URL } from "../app/constants";
</script>

<script define:vars={{ uploadUrl, id, API_URL }}>
  const muxUploader = document.querySelector('mux-uploader');
  muxUploader.endpoint = uploadUrl;

  // TODO: Event listener 'upload-error'. ¿Qué vamos a hacer cuando no se pueda subir el video a MUX?
  // Mostrar pantalla de error y pedirle al usuario que vuelva a intentar.

  muxUploader.addEventListener('file-ready', async (e) => {
    const file = e.detail;
    // TODO: Validar que el tipo del archivo sea video. De no ser así, NO ejecutar el fetch.

    const mainForm = document.getElementById('main-form');
    const loader = document.getElementById('loader');
    const loaderText = document.getElementById('loader-text');

    mainForm.classList.add('hidden');
    loader.classList.add('upload-loader');
    loaderText.classList.remove('hidden');
    loaderText.classList.add('loader-text', 'text-md', 'dark:text-white', 'font-semibold');

    const formData = new FormData();
    formData.append('file', file);

    const res = await fetch(`${API_URL}gemini-data.json`, {
      method: 'POST',
      body: formData,
    });
    const geminiResponse = await res.json();
    localStorage.setItem(id, geminiResponse);
    location.href = `/video-results/${id}`
  });

  muxUploader.addEventListener("success", () => {
    const analyzeLoader = document.getElementById('analyze-loader');
    const loader = document.getElementById('loader');
    const loaderText = document.getElementById('loader-text');
    
    loader.classList.add('new-fade-in');
    loaderText.classList.add('new-fade-in');
    setTimeout(() => {
      loaderText.innerHTML = 'Analyzing results...';
      loader.classList.remove('upload-loader');
      loader.classList.add('analyze-loader');
    }, 1000)
  });
</script>
